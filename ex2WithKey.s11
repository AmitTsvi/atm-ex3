. = torg + 1000
 
main:		mov pc, sp				;start a stack
			tst -(sp)
			tstb nCols			;checks if the input is an empty picture - than no processing is needed
			beq finish
			tstb nRows
			beq finish

			movb nRows, r0		;copying the input Img to Output for processing
			movb nCols, r1
			mul r0, r1
			mov #Img, r2
			mov #Output, r3
copyloop:	movb (r2)+, (r3)+
			sub #1, r1
			bne copyloop
			jsr pc, keyActivation	;before encryption or decryption we activate the secret key
			tstb Enc			;if 1 than first encrypt bytes than encrypt lines, else if 0 first decrypt lines than decrypt bytes
			bne Bytes

		
		
Lines:		movb nCols, r3		;r3 = start of current block pointer and no need to process line 0
			add #Output, r3		;now r3 points to the start of line 1
			movb #1, r1			;r1 is shift iterations counter, initialized with 1 for line 1
lineloop:	movb nCols, r0		;r0 = number of columns in each row act as counter of blocks to process
blocksloop:	clr r5				;r5 acts as per block shift iterations counter
			tstb Enc			
			beq shiftleft		;for encrypt shiftright for decrypt shiftleft
shiftright:	movb (r3), r4		;r4 acts as swap temp register
			movb 3(r3), (r3)
			movb 2(r3), 3(r3)
			movb 1(r3), 2(r3)
			movb r4, 1(r3)
			add #1, r5			;add 1 to shift iterations on this line
			cmpb r1, r5			;if the number of iterations equals line number than we are finished for this block
			bne shiftright		
			br aftershift		;skipping shiftleft for encryption
shiftleft:	movb 3(r3), r4		;r4 acts as swap temp register
			movb (r3), 3(r3)
			movb 1(r3), (r3)
			movb 2(r3), 1(r3)
			movb r4, 2(r3)
			add #1, r5			;add 1 to shift iterations on this line
			cmpb r1, r5			;if the number of iterations equals line number than we are finished for this block
			bne shiftleft		
aftershift:	add #4, r3			;add number of columns to point to the start of the next block
			sub #4, r0			;each block we finished is 4 columns to process
			bne blocksloop		;if block counter not 0 than we have more blocks to process in this line
			add #1, r1			;indicating that next line to be processed is current line +1
			cmpb nRows, r1		;did you finish the last line
			bpl lineloop		;if next line is valid than process it
			tstb Enc			;if Enc=1 than we finished after lines encrypt, otherwise Enc=0 continue to decrypt bytes
			bne finish
		

Bytes:		movb nCols, r0					
			movb nRows, r1
			mul r0, r1
			mov #Output, r2
			tstb Enc				;if Enc is 1 then we need to encrypt, else we after lines decrypt and we need to decrypt bytes
			bne encBytes
			
decBytes:	mov #Hash, r3		;put hash starting address into r3
			add #-1,r3			
			movb #-1, r4		;set r4 into -1, while r4 is the iterator
bytesLoop:	add #1, r4			;add 1 to r4, each loop iteration
			add #1, r3			;add 1 to hash adrress in order to iterate over the hash 
			cmpb (r3), (r2)		;compare if the hash in the i place is equals to the number in the encrypted output
			bne bytesLoop		;if not equal run again 
			movb r4, (r2)+		;if equal put the iterator into the output and advance it 
			sub #1, r1			;subtract one from the total runs 
			bne decBytes			
			br finish			;if decryption is finish we are done		

encBytes:	mov #Hash, r3
			movb (r2), r4
			add r4, r3
			movb (r3), (r2)+
			sub #1, r1
			bne encBytes								
			tstb Enc			;if Enc=1 than after bytes encryption we need to do line encryption
			bne Lines		
		
		
finish:		jsr pc, keyActivation ;after encryption or decryption we activate the secret key
			halt

keyActivation: mov -(sp), r0 ;backup registers in stack
			mov -(sp), r1
			mov -(sp), r2
			mov -(sp), r3
			mov -(sp), r4
			movb nCols, r0	;the picture isn't empty
			movb nRows, r1
			mul r0, r1		;total number bytes in the picture to r1
			mov #Output, r0		;picture's address to r0
keyStart:	mov #Key, r2		;putting the address of the key to r2
keyIteretion:mov (r2)+, r3 	;putting the element of the node in r3 and progress the pointer to the next node address
			movb (r0), r4	;no byte operation of xor then we use another register r4
			xor r3, r4
			movb r4, (r0)+	;xor between key and the byte of the picture and progress the pointer of picture		
			dec r1
			tst r1 
			beq keyFinished
			tst (r2)
			beq keyStart
			mov (r2),r4		;address of next node in r4
			mov r4, r2
			br keyIteretion
keyFinished:	mov r4, (sp)+
			mov r3, (sp)+	;restore registers from stack
			mov r2, (sp)+
			mov r1, (sp)+
			mov r0, (sp)+
			rts pc			;return from function with the pc 
			
	
. = torg + 5000
nCols: 	.byte 4
nRows: 	.byte 4
Enc: 	.byte 1
Img: 	.byte	 1,  2,  1,  2
	 	.byte	 3,  4,  3,  4
	 	.byte	 5,  6,  5,  6
	 	.byte	 7,  0,  7,  0
Hash:	.byte 	2,3,4,5,6,7,10,11,12,13,14,15,16,17,0,1
.even
Output: .blkw 20
.even
Key:		
node1:		.word 0, node2
node2:		.word 1, node3
node3:		.word 2, 0